require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const nodemailer = require('nodemailer');
const axios = require('axios');
const fs = require('fs');

const bot = new Telegraf(process.env.BOT_TOKEN);

const cardNames = JSON.parse(fs.readFileSync('./cards.json', 'utf8'));
const userSelections = {}; // { userId: '–ö–∞—Ä—Ç–∞ 1' }

// –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö
const mainMenu = Markup.inlineKeyboard(
  Object.entries(cardNames).map(([key, name]) => [Markup.button.callback(name, key)])
);

// –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏
const contactForm = Markup.inlineKeyboard([
  [Markup.button.callback('–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É', 'send_request')],
  [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main')],
]);

// –°—Ç–∞—Ä—Ç
bot.start((ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç—É üëá', mainMenu);
});

// –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
bot.action(/^buy_card_\d+$/, (ctx) => {
  const userId = ctx.from.id;
  const choiceKey = ctx.callbackQuery.data; // ‚Üê —ç—Ç–æ –Ω–∞–¥—ë–∂–Ω–µ–µ, —á–µ–º match
  const cardName = cardNames[choiceKey] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

  userSelections[userId] = cardName;

  ctx.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${cardName}
–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É?`, contactForm);
});

// –ù–∞–∑–∞–¥
bot.action('back_to_main', (ctx) => {
  ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç—É üëá', mainMenu);
});

// –ó–∞—è–≤–∫–∞
bot.action('send_request', async (ctx) => {
  const userId = ctx.from.id;
  const card = userSelections[userId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  const message = `üì© –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\nüßæ –ö–∞—Ä—Ç–∞: ${card}\nüÜî Telegram ID: ${userId}`;

  await ctx.editMessageText('–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üòä');

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
  const transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com',
    port: 587,
    secure: false,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  try {
    await transporter.sendMail({
      from: `"Telegram –ë–æ—Ç" <${process.env.EMAIL_USER}>`,
      to: process.env.EMAIL_TO,
      subject: '–ó–∞—è–≤–∫–∞ –æ—Ç Telegram-–±–æ—Ç–∞',
      text: message,
    });
    console.log('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', error);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¥—Ä—É–≥–∏–µ –±–æ—Ç—ã
  await sendToOtherBots(message);
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥—Ä—É–≥–∏–µ –±–æ—Ç—ã
async function sendToOtherBots(text) {
  const bots = [
    { token: process.env.BOT_TOKEN_2, chatId: process.env.CHAT_ID_2 },
    { token: process.env.BOT_TOKEN_3, chatId: process.env.CHAT_ID_3 },
  ];

  for (const { token, chatId } of bots) {
    try {
      await axios.post(`https://api.telegram.org/bot${token}/sendMessage`, {
        chat_id: chatId,
        text,
      });
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –±–æ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º ${token}:`, err.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫
bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');